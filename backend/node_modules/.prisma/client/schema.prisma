// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String
  lastName    String
  avatar      String?
  bio         String?
  phone       String?
  whatsapp    String?
  instagram   String?
  facebook    String? // Nueva red social
  companyName String? // Nombre de la empresa/emprendimiento
  userType    UserType @default(CLIENT) // CLIENT, SELLER, ADMIN
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products      Product[]
  reels         Reel[]
  orders        Order[]
  reviews       Review[]
  notifications Notification[]
  settings      UserSettings?
  sellerStats   SellerStats?

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  images      String[] // Array of image URLs
  category    String
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]
  reviews Review[]
  reels   Reel[]

  @@map("products")
}

model Reel {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnail   String?
  duration    Int // Duration in seconds
  views       Int      @default(0)
  likes       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  @@map("reels")
}

model Order {
  id            String      @id @default(cuid())
  status        OrderStatus @default(PENDING)
  total         Float
  quantity      Int         @default(1)
  qrCode        String      @unique // Código QR único para tracking
  qrSecretToken String      @unique // Token secreto para validación QR
  paymentMethod String? // Método de pago usado (efectivo, transferencia, etc.)
  notes         String? // Notas del cliente o vendedor
  pickupCode    String? // Código para retiro (opcional)
  branchId      String? // Sucursal donde se entregará el producto
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  branch    Branch? @relation(fields: [branchId], references: [id])

  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String // 'ORDER_CREATED', 'STOCK_LOW', 'ORDER_CONFIRMED', etc.
  title     String
  message   String
  data      Json? // Additional data specific to notification type
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  notificationsEnabled Boolean  @default(true)
  stockAlertsEnabled   Boolean  @default(true)
  orderAlertsEnabled   Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model SellerStats {
  id           String   @id @default(cuid())
  userId       String   @unique
  totalSales   Int      @default(0)
  totalRevenue Float    @default(0)
  productsSold Int      @default(0)
  lastUpdated  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("seller_stats")
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String?
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("branches")
}

enum OrderStatus {
  PENDING // Pedido creado, esperando contacto del cliente
  PAYMENT_PENDING // Cliente contactó vendedor, esperando pago
  PAYMENT_CONFIRMED // Vendedor confirmó pago recibido
  PREPARING // Vendedor preparando producto
  READY_FOR_PICKUP // Producto entregado en sucursal, listo para retiro
  PICKED_UP // Cliente retiró el producto
  DELIVERED // Producto entregado (estado final)
  CANCELLED // Pedido cancelado
}

enum UserType {
  CLIENT // Cliente que compra
  SELLER // Vendedor que vende productos
  ADMIN // Administrador de sucursal
}
